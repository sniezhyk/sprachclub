---
/* If this is an Astro component, you can keep this as a plain .html file
   or drop it into an .astro file inside a <Fragment>. No inline handlers used. */
---

<!doctype html>
<html lang="de">
  <head>
    <meta charset="utf-8" />
    <title>Sprachclub – Auth Tester</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <style>
      :root {
        --bg: #0b1020;
        --card: #111731;
        --muted: #aeb3c2;
        --text: #e7ebf6;
        --accent: #7aa2ff;
        --ok: #2ecc71;
        --warn: #f39c12;
        --err: #e74c3c;
      }
      * {
        box-sizing: border-box;
      }
      body {
        margin: 0;
        font-family:
          system-ui,
          -apple-system,
          Segoe UI,
          Roboto,
          Ubuntu,
          "Helvetica Neue",
          Arial;
        color: var(--text);
        background: linear-gradient(180deg, #0b1020, #0b1020 40%, #0c1430);
      }
      header {
        padding: 24px 20px;
        border-bottom: 1px solid #20305e;
        background: rgba(17, 23, 49, 0.6);
        backdrop-filter: saturate(1.1) blur(6px);
        position: sticky;
        top: 0;
        z-index: 5;
      }
      h1 {
        margin: 0 0 8px;
        font-size: 20px;
        letter-spacing: 0.3px;
      }
      .muted {
        color: var(--muted);
        font-size: 13px;
      }
      main {
        max-width: 1100px;
        margin: 24px auto;
        padding: 0 20px 40px;
        display: grid;
        grid-template-columns: 1.1fr 0.9fr;
        gap: 18px;
      }
      .card {
        background: var(--card);
        border: 1px solid #22356c;
        border-radius: 16px;
        box-shadow: 0 12px 30px rgba(0, 0, 0, 0.25);
      }
      .card h2 {
        margin: 0 0 10px;
        font-size: 16px;
      }
      .card .body {
        padding: 16px;
      }
      .row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 10px;
      }
      label {
        font-size: 12px;
        color: var(--muted);
        display: block;
        margin: 10px 0 4px;
      }
      input,
      textarea {
        width: 100%;
        padding: 10px 12px;
        border-radius: 12px;
        border: 1px solid #2b3f7a;
        background: #0c1430;
        color: var(--text);
        outline: none;
      }
      textarea {
        min-height: 68px;
        resize: vertical;
      }
      .actions {
        display: flex;
        flex-wrap: wrap;
        gap: 8px;
        margin-top: 12px;
      }
      button {
        border: 1px solid #2b3f7a;
        background: #13204a;
        color: var(--text);
        padding: 10px 12px;
        border-radius: 12px;
        cursor: pointer;
        transition:
          transform 0.05s ease,
          background 0.2s;
      }
      button:hover {
        background: #18285c;
      }
      button:active {
        transform: translateY(1px);
      }
      .btn-accent {
        border-color: #3961ff;
        background: #1a2e6e;
      }
      .btn-ok {
        border-color: var(--ok);
        background: #174d2c;
      }
      .btn-warn {
        border-color: var(--warn);
        background: #4a3513;
      }
      .btn-err {
        border-color: var(--err);
        background: #4a1414;
      }
      .grid-3 {
        display: grid;
        grid-template-columns: repeat(3, 1fr);
        gap: 10px;
      }
      .chip {
        display: inline-flex;
        align-items: center;
        gap: 6px;
        border: 1px solid #2b3f7a;
        background: #0c1430;
        padding: 6px 10px;
        border-radius: 999px;
        font-size: 12px;
        color: var(--muted);
      }
      .chip.ok {
        border-color: var(--ok);
        color: #b5f1c9;
      }
      .chip.err {
        border-color: var(--err);
        color: #ffb8b8;
      }
      .tiny {
        font-size: 12px;
        color: var(--muted);
      }
      pre {
        margin: 0;
        white-space: pre-wrap;
        word-break: break-word;
        font-family: ui-monospace, SFMono-Regular, Menlo, Consolas, monospace;
        font-size: 12px;
        line-height: 1.5;
      }
      .resp {
        padding: 14px;
        border-top: 1px solid #20305e;
        background: #0c1430;
        border-radius: 0 0 16px 16px;
        max-height: 420px;
        overflow: auto;
      }
      .k {
        color: #8ab4ff;
      }
      .s {
        color: #b6f28b;
      }
      .n {
        color: #ffd28a;
      }
      .b {
        color: #eaa2ff;
      }
      footer {
        max-width: 1100px;
        margin: 10px auto 40px;
        padding: 0 20px;
        color: var(--muted);
        font-size: 12px;
      }
      @media (max-width: 980px) {
        main {
          grid-template-columns: 1fr;
        }
      }
    </style>
  </head>
  <body>
    <header>
      <h1>Sprachclub – Auth & Host Tester</h1>
      <div class="muted">
        Testet Register, Login, Sessions (Cookies) und Host-Endpunkte.
      </div>
    </header>

    <main>
      <!-- LEFT: forms -->
      <section class="card">
        <div class="body">
          <div class="row" style="align-items:end">
            <div>
              <label>Base URL</label>
              <input id="base" placeholder="http://localhost:5000" />
              <div class="tiny">
                Standard: <code>window.location.origin</code>
              </div>
            </div>
            <div>
              <label>&nbsp;</label>
              <div class="actions">
                <button class="btn-accent" id="btn-use-origin"
                  >Origin übernehmen</button
                >
                <button id="btn-me-top">/me prüfen</button>
              </div>
            </div>
          </div>

          <hr style="border:0;border-top:1px solid #20305e;margin:14px 0" />

          <h2>Registrieren</h2>
          <div class="row">
            <div>
              <label>Username</label><input
                id="r_username"
                placeholder="roman"
              />
            </div>
            <div>
              <label>Email</label><input
                id="r_email"
                placeholder="roman@example.com"
              />
            </div>
          </div>
          <div class="row">
            <div>
              <label>Vorname</label><input id="r_first" placeholder="Roman" />
            </div>
            <div>
              <label>Nachname</label><input id="r_last" placeholder="Muster" />
            </div>
          </div>
          <div class="row">
            <div>
              <label>Geburtsdatum</label><input id="r_birth" type="date" />
            </div>
            <div>
              <label>Passwort</label><input
                id="r_pw"
                type="password"
                placeholder="••••••••"
              />
            </div>
          </div>
          <div class="row">
            <div><label>Host?</label><input id="r_host" type="checkbox" /></div>
            <div>
              <label>Host-Bio (optional)</label><input
                id="r_bio"
                placeholder="Ich hoste gern B1 Clubs."
              />
            </div>
          </div>
          <div class="actions">
            <button class="btn-ok" id="btn-register">Registrieren</button>
            <button id="btn-randomize">Random Username</button>
          </div>

          <hr style="border:0;border-top:1px solid #20305e;margin:14px 0" />

          <h2>Login / Logout</h2>
          <div class="row">
            <div>
              <label>Identifier (Username oder E-Mail)</label><input
                id="l_ident"
                placeholder="roman oder roman@example.com"
              />
            </div>
            <div>
              <label>Passwort</label><input
                id="l_pw"
                type="password"
                placeholder="••••••••"
              />
            </div>
          </div>
          <div class="actions">
            <button class="btn-ok" id="btn-login">Login</button>
            <button class="btn-warn" id="btn-logout">Logout</button>
          </div>

          <hr style="border:0;border-top:1px solid #20305e;margin:14px 0" />

          <h2>Host (nur mit Rolle host)</h2>
          <div class="row">
            <div>
              <label>Neue Bio</label><input
                id="h_bio"
                placeholder="Neue Bio: Deutsch B2/C1"
              />
            </div>
            <div class="actions">
              <button id="btn-host-get">GET /host/profile</button>
              <button id="btn-host-put">PUT /host/profile</button>
            </div>
          </div>
          <div class="actions">
            <button id="btn-promote">Promote → host</button>
            <button id="btn-demote">Demote → user</button>
          </div>
        </div>
        <div class="resp" id="resp"></div>
      </section>

      <!-- RIGHT: session status -->
      <section class="card">
        <div class="body">
          <h2>Status</h2>
          <div id="status" class="chip">noch nicht geprüft</div>
          <div style="margin-top:10px" id="roles" class="chip">Rollen: –</div>

          <div style="margin-top:16px">
            <h2>Aktionen</h2>
            <div class="actions">
              <button id="btn-me">/api/auth/me</button>
              <button id="btn-clear-log">Log leeren</button>
            </div>
          </div>

          <div style="margin-top:16px">
            <h2>Hinweise</h2>
            <ul class="tiny">
              <li>
                Für lokales Testen ohne HTTPS: <code
                  >SESSION_COOKIE_SECURE=0</code
                > setzen.
              </li>
              <li>
                Seite am besten über <code>/static/tester.html</code> laden (gleiches
                Origin).
              </li>
              <li>
                Alle Requests senden Cookies mit: <code
                  >credentials: "include"</code
                >.
              </li>
            </ul>
          </div>
        </div>
      </section>
    </main>

    <footer>
      <div>© Sprachclub Tester • Built for your Flask endpoints</div>
    </footer>

    <script>
      // ---------- helpers ----------
      const $ = (id) => document.getElementById(id);
      const j = (obj) => JSON.stringify(obj, null, 2);

      function base() {
        const v = $("base").value.trim();
        return v || window.location.origin;
      }
      function useOrigin() {
        $("base").value = window.location.origin;
        toast("Base URL auf window.location.origin gesetzt.");
      }
      function toast(msg) {
        const s = $("status");
        s.textContent = msg;
        s.className = "chip";
      }
      function setStatus(auth, roles = []) {
        const s = $("status");
        s.textContent = auth ? "eingeloggt" : "nicht eingeloggt";
        s.className = "chip " + (auth ? "ok" : "err");
        const r = $("roles");
        r.textContent = "Rollen: " + (roles.length ? roles.join(", ") : "–");
      }
      function pretty(obj) {
        let str = j(obj);
        str = str.replace(/"(.*?)"(?=\\s*:)/g, '<span class="k">"$1"</span>');
        str = str.replace(/: "(.*?)"/g, ': <span class="s">"$1"</span>');
        str = str.replace(
          /: (\\d+)([,\\n}])/g,
          ': <span class="n">$1</span>$2'
        );
        str = str.replace(
          /: (true|false|null)/g,
          ': <span class="b">$1</span>'
        );
        return str;
      }

      async function showResponse(res) {
        const headers = {};
        res.headers.forEach((v, k) => (headers[k] = v));
        let bodyText = await res.text();
        let body;
        try {
          body = JSON.parse(bodyText);
        } catch {
          body = bodyText;
        }

        const panel = $("resp");
        panel.innerHTML =
          `<div class="tiny">URL: <code>${res.url}</code></div>` +
          `<div class="tiny">Status: <strong>${res.status} ${res.statusText}</strong></div>` +
          `<div class="tiny">Headers:</div><pre>${pretty(headers)}</pre>` +
          `<div class="tiny">Body:</div><pre>${typeof body === "string" ? body : pretty(body)}</pre>`;

        // Update session status via /me
        await pingMe(false);
      }

      async function api(path, { method = "GET", body = null } = {}) {
        const opts = {
          method,
          credentials: "include",
          headers: { Accept: "application/json" },
        };
        if (body !== null) {
          opts.headers["Content-Type"] = "application/json";
          opts.body = JSON.stringify(body);
        }
        const res = await fetch(base() + path, opts);
        await showResponse(res);
        return res;
      }

      function randomize() {
        const u = "user" + Math.random().toString(36).slice(2, 8);
        $("r_username").value = u;
        $("r_email").value = `${u}@example.com`;
        $("r_first").value = "Test";
        $("r_last").value = "User";
        $("r_pw").value = "SehrSicher123";
        $("r_host").checked = true;
        toast("Zufallsuser vorbereitet.");
      }

      async function pingMe(show = true) {
        try {
          const res = await fetch(base() + "/api/auth/me", {
            credentials: "include",
          });
          let roles = [];
          if (res.status === 200) {
            const d = await res.json();
            roles =
              d?.user?.roles ||
              (typeof d?.user?.is_host === "boolean"
                ? ["user"].concat(d.user.is_host ? ["host"] : [])
                : []);
            setStatus(true, roles);
            if (show)
              await showResponse(
                new Response(JSON.stringify(d), {
                  status: 200,
                  statusText: "OK",
                })
              );
          } else {
            setStatus(false, []);
            if (show) await showResponse(res);
          }
        } catch (e) {
          setStatus(false, []);
          $("resp").innerHTML = `<pre>${e}</pre>`;
        }
      }

      function clearLog() {
        $("resp").innerHTML = "";
        toast("Log geleert.");
      }

      // ---------- actions ----------
      async function register() {
        const body = {
          username: $("r_username").value.trim(),
          email: $("r_email").value.trim(),
          first_name: $("r_first").value.trim(),
          last_name: $("r_last").value.trim(),
          birth_date: $("r_birth").value || null,
          password: $("r_pw").value,
          is_host: $("r_host").checked,
          bio: $("r_bio").value.trim(),
        };
        await api("/api/auth/register", { method: "POST", body });
      }

      async function login() {
        const body = {
          identifier: $("l_ident").value.trim(),
          password: $("l_pw").value,
          remember: true,
        };
        await api("/api/auth/login", { method: "POST", body });
      }

      async function logout() {
        await api("/api/auth/logout", { method: "POST" });
      }

      async function hostProfile() {
        await api("/api/host/profile");
      }

      async function hostProfileUpdate() {
        const body = { bio: $("h_bio").value.trim() };
        await api("/api/host/profile", { method: "PUT", body });
      }

      async function promote() {
        await api("/api/host/promote", { method: "POST" });
      }

      async function demote() {
        await api("/api/host/demote", { method: "POST" });
      }

      // ---------- bind events (Astro/no inline handlers) ----------
      window.addEventListener("DOMContentLoaded", () => {
        $("base").value = window.location.origin;
        setStatus(false, []);

        // top bar
        $("btn-use-origin").addEventListener("click", useOrigin);
        $("btn-me-top").addEventListener("click", () => pingMe(true));

        // register section
        $("btn-register").addEventListener("click", register);
        $("btn-randomize").addEventListener("click", randomize);

        // auth
        $("btn-login").addEventListener("click", login);
        $("btn-logout").addEventListener("click", logout);

        // host
        $("btn-host-get").addEventListener("click", hostProfile);
        $("btn-host-put").addEventListener("click", hostProfileUpdate);
        $("btn-promote").addEventListener("click", promote);
        $("btn-demote").addEventListener("click", demote);

        // right column actions
        $("btn-me").addEventListener("click", () => pingMe(true));
        $("btn-clear-log").addEventListener("click", clearLog);
      });
    </script>
  </body>
</html>
